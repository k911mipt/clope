{
    //"defaultSeverity": "error",
    "defaultSeverity": "warning",
    "extends": [
        "tslint-consistent-codestyle"
    //    //"tslint:recommended",
    //    "tslint-clean-code",
        //"tslint-microsoft-contrib"
    //    "tslint:all"
    ],
    "jsRules": {},
    "check-type": true,
    "rules": {
        //#region Functionality
        "ban": false, //https://palantir.github.io/tslint/rules/ban/
        "no-return-await": true,
        "no-return-undefined": [ //https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-return-undefined.md
            true,
            "allow-void-expression"
        ],
        "no-unnecessary-callback-wrapper": true,
        "only-arrow-functions": [
            true,
            "allow-declarations",
            "allow-named-functions"
        ],
        //#endregion

        //#region Potential errors
        "no-accessor-recursion": true, //https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-accessor-recursion.md
        "no-conditional-assignment": true,
        // "no-console": [ true, "log", "error" ],
        "no-duplicate-super": true,
        "no-eval": true, //lookup https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval
        "no-shadowed-variable": true,
        "no-string-literal": true,
        "no-unsafe-finally": true,
        "no-unused-expression": [
            true,
            "allow-fast-null-checks",
            "allow-new",
            "allow-tagged-template"
        ],
        "radix": true,
        //#endregion

        //#region Maintainability
        "cyclomatic-complexity": [true, 20],
        //"no-inferrable-types": [true, "ignore-params", "ignore-properties"],
        //"no-inferrable-types": true,
        "no-unnecessary-else": [ true, "allow-else-if" ], //https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-unnecessary-else.md
        "no-var-before-return": [ true, "allow-destructuring" ], //https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-var-before-return.md
        "prefer-const": true,
        "typedef": [
            true,
            "call-signature",
            //"arrow-call-signature",
            //"parameter",
            //"arrow-parameter",
            "property-declaration"
            //"variable-declaration",
            //"member-variable-declaration",
            //"object-destructuring",
            //"array-destructuring"
        ],
        //#endregion

        //#region Style
        "adjacent-overload-signatures": true,
        "align": [
            true,
            "parameters",
            "arguments",
            "statements",
            "elements",
            "members"
        ],
        "array-type": [true, "array"],
        //"arrow-parens": true,
        "arrow-return-shorthand": true,
        "callable-types": true,
        "jsdoc-format": [true, "check-multiline-start"],
        //"indent": [true, "spaces", 4],
        "interface-over-type-literal": true,
        "naming-convention": [ //https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/naming-convention.md
            //    true,
            //    // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
            //    {"type": "default", "format": "camelCase", "leadingUnderscore": "forbid", "trailingUnderscore": "forbid"},
            //    //Для локализации используем переменные имя которых начинается на `LS_` с указанием типа `string`.  "regex": "^[TUV]$"
            //    //{"type": "variable", "format": "PascalCase", "prefix": "LS_"},
            //    {"type": "variable", "format": "PascalCase", "prefix": "LS_"},
            //    //Локальные переменные, за исключением некоторых (`i`, `j`, `n`, `N`, `...`) должны начинаться с `x`.
            //    {"type": "functionVariable", "modifier": "local", "prefix": "x"},
            //    {"type": "parameter", "modifier": "local", "prefix": "x"},
            //    //Имена классов начинаются с большой буквы, без привычной `T` в начале.
                {"type": "class", "format": "PascalCase"},
            //    //Имена полей класса начинаются с `F`.
            //    {"type": "property", "prefix": "F"},
            //    //Имена свойств и методов класса начинаются с большой буквы.
                {"type": "member", "format": "PascalCase"}
            ],
        "new-parens": true,
        "no-as-type-assertion": true, //https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-as-type-assertion.md
        "no-irregular-whitespace": true,
        "no-misused-new": true,
        "no-parameter-properties": true,
        "no-this-assignment": [
            true,
            {
                "allowed-names": [
                    "^parent$",
                    "^self$",
                    "^me$"
                ],
                "allow-destructuring": true
            }
        ],
        "no-trailing-whitespace": true,
        "no-unnecessary-initializer": true, 
        // "no-unnecessary-semicolons": true,
        "object-shorthand-properties-first": true,
        "one-line": [
            true,
            "check-catch",
            "check-finally",
            "check-else",
            "check-open-brace",
            "check-whitespace"
        ],
        "prefer-for-of": true,
        "prefer-method-signature": true,
        "quotemark": [
            true,
            "double",
            "avoid-escape",
            "avoid-template"
        ],
        "semicolon": [true, "always"],
        "space-within-parens": true,



        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            },
            {
                "call-signature": "onespace",
                "index-signature": "onespace",
                "parameter": "onespace",
                "property-declaration": "onespace",
                "variable-declaration": "onespace"
            }
        ],
        "whitespace": [
            true,
            //"check-typecast",

            "check-branch",
            //"check-decl", //оставить
            "check-operator", //оставить
            //"check-module",
            "check-separator", //оставить
            "check-rest-spread",
            "check-type",//оставить
            "check-type-operator",//оставить
            "check-preblock" //оставить
        ]
        //#endregion
    },
    "rulesDirectory": []
}